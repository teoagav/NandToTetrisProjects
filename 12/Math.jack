// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack

/**
 * A library of commonly used mathematical functions.
 * Note: Jack compilers implement multiplication and division using OS method calls.
 */
class Math {
    static Array twoToThe;
    /** Initializes the library. */
    function void init() {
      let twoToThe = Array.new(16);
      let twoToThe[0] = 1;
      let twoToThe[1] = 2;
      let twoToThe[2] = 4;
      let twoToThe[3] = 8;
      let twoToThe[4] = 16;
      let twoToThe[5] = 32;
      let twoToThe[6] = 64;
      let twoToThe[7] = 128;
      let twoToThe[8] = 256;
      let twoToThe[9] = 512;
      let twoToThe[10] = 1024;
      let twoToThe[11] = 2048;
      let twoToThe[12] = 4096;
      let twoToThe[13] = 8192;
      let twoToThe[14] = 16384;
      let twoToThe[15] = 32767;
      let twoToThe[15] = twoToThe[15] + 1;
      return;
    }

    /** Returns the absolute value of x. */
    function int abs(int x) {
      if(x < 0) {
        return -x;
      }
      return x;
    }

    /** Returns the product of x and y.
     *  When a Jack compiler detects the multiplication operator '*' in the
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x*y and multiply(x,y) return the same value.
     */
    function int multiply(int x, int y) {
      var int res;

      let res = Math.multHelp(Math.abs(x), Math.abs(y));
      if((x < 0) = (y < 0)) {
        return res;
      }
      return -res;
    }

    function int multHelp(int x, int y) {
      var int sum, i, shiftedX;

      let i = 0;
      let shiftedX = x;
      let sum = 0 ;
      while(i < 15) {
        if(Math.bit(y,i)) {
          let sum = sum + shiftedX;
        }
        let shiftedX = shiftedX + shiftedX;
        let i = i + 1;
      }
      return sum;
    }

    /** Returns the integer part of x/y.
     *  When a Jack compiler detects the multiplication operator '/' in the
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x/y and divide(x,y) return the same value.
     */
    function int divide(int x, int y) {
      var int res;
      if(y = 0) {
        do Sys.error(3);
        return 0;
      }

      let res = Math.divHelp(Math.abs(x), Math.abs(y));
      if((x < 0) = (y < 0)) {
        return res;
      }
      return -res;
    }

    function int divHelp(int x, int y) {
      var int q, r, i;
      let q = 0;
      let r = 0;
      let i = 14;
      while(i > -1) {
        let r = r + r;
        if(Math.bit(x,i)) {
          let r = r + 1;
        }

        if(~(r < y)) {
          let r = r - y;
          let q = q + twoToThe[i];
        }

        let i = i - 1;
      }

      return q;
    }

    /** Returns the integer part of the square root of x. */
    function int sqrt(int x) {
      var int i, y;
      if(x < 0) {
        do Sys.error(4);
        return -1;
      }

      let i = 8;
      let y = 0;
      while(i > -1) {
        if( (~(((y + twoToThe[i])*(y + twoToThe[i])) > x)) & (((y + twoToThe[i])*(y + twoToThe[i])) > 0)) {
          let y = y + twoToThe[i];
        }

        let i = i - 1;
      }
      return y;
    }

    /** Returns the greater number. */
    function int max(int a, int b) {
      if(a > b) {
        return a;
      }
      return b;
    }

    /** Returns the smaller number. */
    function int min(int a, int b) {
      if(a > b) {
        return b;
      }
      return a;
    }

    function bool bit(int x, int j) {
      return ~((x & twoToThe[j]) = 0);
    }
}
